# Pure
# test
# by Sindre Sorhus
# https://github.com/sindresorhus/pure
# MIT License

# For my own and others sanity
# git:
# %b => current branch
# %a => current action (rebase/merge)
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)


# turns seconds into human readable time
# 165392 => 1d 21h 56m 32s
prompt_pure_human_time() {
	local tmp=$1
	local days=$(( tmp / 60 / 60 / 24 ))
	local hours=$(( tmp / 60 / 60 % 24 ))
	local minutes=$(( tmp / 60 % 60 ))
	local seconds=$(( tmp % 60 ))
	(( $days > 0 )) && echo -n "${days}d "
	(( $hours > 0 )) && echo -n "${hours}h "
	(( $minutes > 0 )) && echo -n "${minutes}m "
	echo "${seconds}s"
}

# fastest possible way to check if repo is dirty
prompt_pure_git_dirty() {
	# check if we're in a git repo
	command git rev-parse --is-inside-work-tree &>/dev/null || return
	# check if it's dirty
	[[ "$PURE_GIT_UNTRACKED_DIRTY" == 0 ]] && local umode="-uno" || local umode="-unormal"
	command test -n "$(git status --porcelain --ignore-submodules ${umode})"

	(($? == 0)) && echo '*'
}

# displays the exec time of the last command if set threshold was exceeded
prompt_pure_cmd_exec_time() {
	local stop=$EPOCHSECONDS
	local start=${cmd_timestamp:-$stop}
	integer elapsed=$stop-$start
	(($elapsed > ${PURE_CMD_MAX_EXEC_TIME:=0})) && prompt_pure_human_time $elapsed
}

prompt_pure_preexec() {
	cmd_timestamp=$EPOCHSECONDS

	# shows the current dir and executed command in the title when a process is active
	#print -Pn "\e]0;"
	#echo -nE "$PWD:t: $2"
	#print -Pn "\a"
}

# string length ignoring ansi escapes
prompt_pure_string_length() {
	echo ${#${(S%%)1//(\%([KF1]|)\{*\}|\%[Bbkf])}}
}

virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        venv=''
    fi
    [[ -n "$venv" ]] && echo " $venv"
}

set_current_dir() {
    pwd >! ~/tmp/whereami
}

aws_info(){
    if [[ ! -z "${AWS_PROFILE}" ]]; then
        echo "AWS: ${AWS_PROFILE%-mfa}"
    fi
}

kube_info(){
    current=$(cat ~/.kube/config | grep current-context | awk '{ print $2 }')

    if [[ "$current" != '""' ]]; then
        namespace=$(cat ~/.kube/config | grep -A1 "cluster: $current" | grep namespace | awk '{print $2}')
        cluster=$(echo $current | sed 's/gke_.*_//')
        echo " $cluster/$namespace"
    fi
}

tf_info(){
    # Get Virtual Env
    if [[ -n "$TF_VAR_stack_id" && -n "$TF_VAR_env" ]]; then
        tfstatus="$TF_VAR_stack_id/$TF_VAR_env"
    else
        tfstatus=''
    fi
    [[ -n "$tfstatus" ]] && echo " $tfstatus"
}

prompt_pure_precmd() {
	# shows the full path in the title
	# print -Pn '\e]0;%~\a'

	# git info
	vcs_info

	local prompt_pure_preprompt="%F{yellow}`prompt_pure_cmd_exec_time`%f%F{magenta}`tf_info`%f%F{green} `aws_info``kube_info``set_current_dir`%f%F{cyan}`virtualenv_info`%f%F{blue}$vcs_info_msg_0_`prompt_pure_git_dirty` %*"
    RPROMPT=$prompt_pure_preprompt

	# reset value since `preexec` isn't always triggered
	unset cmd_timestamp
}


prompt_pure_setup() {
	# prevent percentage showing up
	# if output doesn't end with a newline
	export PROMPT_EOL_MARK=''

	prompt_opts=(cr subst percent)

	zmodload zsh/datetime
	autoload -Uz add-zsh-hook
	autoload -Uz vcs_info

	add-zsh-hook precmd prompt_pure_precmd
	add-zsh-hook preexec prompt_pure_preexec

	zstyle ':vcs_info:*' enable git
	zstyle ':vcs_info:git*' formats ' %b'
	zstyle ':vcs_info:git*' actionformats ' %b|%a'

	# prompt turns red if the previous command didn't exit with 0
	PROMPT='%(?.%F{blue}.%F{red})‚ùØ%f '
}

prompt_pure_setup "$@"
